// generated with ast extension for cup
// version 0.8
// 23/7/2022 20:18:35


package rs.ac.bg.etf.pp1.ast;

public interface Visitor { 

    public void visit(Mulop Mulop);
    public void visit(Relop Relop);
    public void visit(Assignop Assignop);
    public void visit(VarDeclNoError VarDeclNoError);
    public void visit(StatementList StatementList);
    public void visit(Addop Addop);
    public void visit(OptArgsTypes OptArgsTypes);
    public void visit(Factor Factor);
    public void visit(VarTypeNoError VarTypeNoError);
    public void visit(VarDeclListNoError VarDeclListNoError);
    public void visit(CondTerm CondTerm);
    public void visit(VarList VarList);
    public void visit(ConstList ConstList);
    public void visit(DeclList DeclList);
    public void visit(Designator Designator);
    public void visit(MethodName MethodName);
    public void visit(Term Term);
    public void visit(FormParsList FormParsList);
    public void visit(MethodParams MethodParams);
    public void visit(Condition Condition);
    public void visit(DesignatorAssignOp DesignatorAssignOp);
    public void visit(Statements Statements);
    public void visit(ActParsList ActParsList);
    public void visit(OptArgsList OptArgsList);
    public void visit(ClassExtends ClassExtends);
    public void visit(ClassMethodsBody ClassMethodsBody);
    public void visit(VarDeclList VarDeclList);
    public void visit(Expr Expr);
    public void visit(ActPars ActPars);
    public void visit(DesignatorStatement DesignatorStatement);
    public void visit(Decl Decl);
    public void visit(Statement Statement);
    public void visit(VarDecl VarDecl);
    public void visit(ConstDecl ConstDecl);
    public void visit(CondFact CondFact);
    public void visit(MethodDeclList MethodDeclList);
    public void visit(IfConditionError IfConditionError);
    public void visit(VarType VarType);
    public void visit(SingleStatement SingleStatement);
    public void visit(ConstType ConstType);
    public void visit(FormPars FormPars);
    public void visit(VarListNoError VarListNoError);
    public void visit(MulOpPercent MulOpPercent);
    public void visit(MulOpSlash MulOpSlash);
    public void visit(MulOpStar MulOpStar);
    public void visit(AddOpMinus AddOpMinus);
    public void visit(AddOpPlus AddOpPlus);
    public void visit(RelOpLeq RelOpLeq);
    public void visit(RelOpLss RelOpLss);
    public void visit(RelOpGeq RelOpGeq);
    public void visit(RelOpGtr RelOpGtr);
    public void visit(RelOpNeq RelOpNeq);
    public void visit(RelOpEqu RelOpEqu);
    public void visit(ExprFactor ExprFactor);
    public void visit(TypeExprFactor TypeExprFactor);
    public void visit(TypeFactor TypeFactor);
    public void visit(DesignatorActParsFactor DesignatorActParsFactor);
    public void visit(DesignatorFactor DesignatorFactor);
    public void visit(FactorSuper FactorSuper);
    public void visit(BoolFactor BoolFactor);
    public void visit(CharFactor CharFactor);
    public void visit(NumberFactor NumberFactor);
    public void visit(SingleTerm SingleTerm);
    public void visit(TermMultiple TermMultiple);
    public void visit(SingleNegExpr SingleNegExpr);
    public void visit(SingleExpr SingleExpr);
    public void visit(ExprMultiple ExprMultiple);
    public void visit(CondFactRelop CondFactRelop);
    public void visit(CondFactNoRelop CondFactNoRelop);
    public void visit(SingleCondTerm SingleCondTerm);
    public void visit(CondTermMultiple CondTermMultiple);
    public void visit(SingleCondition SingleCondition);
    public void visit(ConditionMultiple ConditionMultiple);
    public void visit(DesignatorThis DesignatorThis);
    public void visit(SingleDesignator SingleDesignator);
    public void visit(DesignatorArray DesignatorArray);
    public void visit(DesignatorMultiple DesignatorMultiple);
    public void visit(Assign Assign);
    public void visit(EmptyActParsList EmptyActParsList);
    public void visit(ActParsListExists ActParsListExists);
    public void visit(ActParsSingle ActParsSingle);
    public void visit(ActParsMultiple ActParsMultiple);
    public void visit(DesignatorAssignError DesignatorAssignError);
    public void visit(DesignatorAssign DesignatorAssign);
    public void visit(MakeNewActParmsListDesignator MakeNewActParmsListDesignator);
    public void visit(MakeNewActParmsListSuper MakeNewActParmsListSuper);
    public void visit(DesignatorStatementAct DesignatorStatementAct);
    public void visit(DesignatorStatementSuper DesignatorStatementSuper);
    public void visit(DesignatorStatementAssign DesignatorStatementAssign);
    public void visit(DesignatorStatementDec DesignatorStatementDec);
    public void visit(DesignatorStatementInc DesignatorStatementInc);
    public void visit(WhileForGen WhileForGen);
    public void visit(DoForCheck DoForCheck);
    public void visit(ErrorIfCondition ErrorIfCondition);
    public void visit(IfCondition IfCondition);
    public void visit(ElseForGen ElseForGen);
    public void visit(IfForGen IfForGen);
    public void visit(PrintNumStatement PrintNumStatement);
    public void visit(PrintNoNumStatement PrintNoNumStatement);
    public void visit(ReadStatement ReadStatement);
    public void visit(ReturnExprStatement ReturnExprStatement);
    public void visit(ReturnNoExprStatement ReturnNoExprStatement);
    public void visit(ContinueStatement ContinueStatement);
    public void visit(BreakStatement BreakStatement);
    public void visit(DoWhileStatement DoWhileStatement);
    public void visit(IfElseStatement IfElseStatement);
    public void visit(IfStatement IfStatement);
    public void visit(DStatement DStatement);
    public void visit(Block Block);
    public void visit(StatementsMultiple StatementsMultiple);
    public void visit(StatementSingle StatementSingle);
    public void visit(EmptyStatementList EmptyStatementList);
    public void visit(StatementListHasStatements StatementListHasStatements);
    public void visit(BooleanOptArg BooleanOptArg);
    public void visit(CharOptArg CharOptArg);
    public void visit(NumberOptArg NumberOptArg);
    public void visit(OptArgs OptArgs);
    public void visit(SingleOptArgsList SingleOptArgsList);
    public void visit(OptArgsListMultiple OptArgsListMultiple);
    public void visit(FormParsArray FormParsArray);
    public void visit(FormParsNonArray FormParsNonArray);
    public void visit(FormParsListError FormParsListError);
    public void visit(SingleFormParsList SingleFormParsList);
    public void visit(FormParsListMultiple FormParsListMultiple);
    public void visit(EmptyMethodParams EmptyMethodParams);
    public void visit(MethodParamsOnlyOpt MethodParamsOnlyOpt);
    public void visit(MethodParamsOnlyForm MethodParamsOnlyForm);
    public void visit(MethodParamsWithBoth MethodParamsWithBoth);
    public void visit(MethodType MethodType);
    public void visit(MethodVoid MethodVoid);
    public void visit(MethodSigEnd MethodSigEnd);
    public void visit(MethodDecl MethodDecl);
    public void visit(SingleMethodDeclList SingleMethodDeclList);
    public void visit(MethodDList MethodDList);
    public void visit(ConstructorName ConstructorName);
    public void visit(ConstructorDecl ConstructorDecl);
    public void visit(EmptyClassMethodsBody EmptyClassMethodsBody);
    public void visit(ClassMethodsBodyNoConstructor ClassMethodsBodyNoConstructor);
    public void visit(ClassMethodsBodyOnlyConstructor ClassMethodsBodyOnlyConstructor);
    public void visit(ClassMethodsBodyBoth ClassMethodsBodyBoth);
    public void visit(EmptyVarDeclListNoError EmptyVarDeclListNoError);
    public void visit(VarDeclListNoErrorHasItems VarDeclListNoErrorHasItems);
    public void visit(EmptyVarDeclList EmptyVarDeclList);
    public void visit(VarDeclListHasItems VarDeclListHasItems);
    public void visit(ClassExError ClassExError);
    public void visit(EmptyClassEx EmptyClassEx);
    public void visit(ClassEx ClassEx);
    public void visit(ClassName ClassName);
    public void visit(ClassDecl ClassDecl);
    public void visit(NonArrayVarNoError NonArrayVarNoError);
    public void visit(ArrayVarNoError ArrayVarNoError);
    public void visit(SingleVarNoError SingleVarNoError);
    public void visit(MultipleVarNoError MultipleVarNoError);
    public void visit(VarDNoError VarDNoError);
    public void visit(NonArrayVar NonArrayVar);
    public void visit(ArrayVar ArrayVar);
    public void visit(VarListError VarListError);
    public void visit(SingleVar SingleVar);
    public void visit(MultipleVar MultipleVar);
    public void visit(VarError VarError);
    public void visit(VarD VarD);
    public void visit(BooleanConst BooleanConst);
    public void visit(CharConst CharConst);
    public void visit(NumberConst NumberConst);
    public void visit(SingleConst SingleConst);
    public void visit(MultipleConst MultipleConst);
    public void visit(ConstTypeName ConstTypeName);
    public void visit(ConstD ConstD);
    public void visit(ClassDeclD ClassDeclD);
    public void visit(VarDeclD VarDeclD);
    public void visit(ConstDeclD ConstDeclD);
    public void visit(EmptyDeclList EmptyDeclList);
    public void visit(MultipleDecl MultipleDecl);
    public void visit(Type Type);
    public void visit(ProgramName ProgramName);
    public void visit(Program Program);

}
